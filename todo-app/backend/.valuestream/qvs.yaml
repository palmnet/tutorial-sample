params:
  - name: appName
    type: string
  - name: azureSubscriptionId
    type: string
  - name: azureResourceGroupName
    type: string
  - name: azureDnsZoneResourceGroupName
    type: string
  - name: azureDnsZoneName
    type: string
  - name: azureDnsARecordName
    type: string
  - name: azureStaticIpAddress
    type: string
  - name: mysqlCreateDbName
    type: string
  - name: azureKeyVaultKeyContainerName
    type: string
  - name: clusterIssuerName
    type: string
  - name: k8sNamespace
    type: string
  - name: imageName
    type: string
  - name: port
    type: string
  - name: dbHost
    type: string
  - name: redisHost
    type: string
  - name: redisPasswordSecretName
    type: string
  - name: host
    type: string

modules:
  - name: qmonus.net/adapter/official
    remote:
      repo: github.com/qmonus/official-cloud-native-adapters
      revision: v0.17.0

designPatterns:
  - pattern: qmonus.net/adapter/official/adapters/azure/container/kubernetes/apiBackend
    params:
      appName: $(params.appName)
      azureSubscriptionId: $(params.azureSubscriptionId)
      azureResourceGroupName: $(params.azureResourceGroupName)
      azureDnsZoneResourceGroupName: $(params.azureDnsZoneResourceGroupName)
      azureDnsZoneName: $(params.azureDnsZoneName)
      azureDnsARecordName: $(params.azureDnsARecordName)
      azureStaticIpAddress: $(params.azureStaticIpAddress)
      mysqlCreateDbName: $(params.mysqlCreateDbName)
      azureKeyVaultKeyContainerName: $(params.azureKeyVaultKeyContainerName)
      clusterIssuerName: $(params.clusterIssuerName)
      k8sNamespace: $(params.k8sNamespace)
      imageName: $(params.imageName)
      port: $(params.port)
      dbHost: $(params.dbHost)
      redisHost: $(params.redisHost)
      redisPasswordSecretName: $(params.redisPasswordSecretName)
      host: $(params.host)
  - pattern: qmonus.net/adapter/official/pipeline/utils/pulumi:refer
    pipelineParams:
      jqQueries:
        - name: ContainerRegistry
          query:
            selector: '.type == "azure-native:containerregistry:Registry"'
            path: .outputs.loginServer
        - name: ImageRegistryPath
          query:
            selector: '.type == "azure-native:containerregistry:Registry"'
            path: .outputs.loginServer
        - name: AzureSubscriptionId
          query:
            selector: '.type == "kubernetes:cert-manager.io/v1:ClusterIssuer"'
            path: .outputs.spec.acme.solvers[0].dns01.azureDNS.subscriptionID
        - name: AzureResourceGroupName
          query:
            selector: '.type == "azure-native:resources:ResourceGroup"'
            path: .outputs.name
        - name: AzureStaticIpAddress
          query:
            selector: '.type == "azure-native:network:PublicIPAddress"'
            path: .outputs.ipAddress
        - name: AzureKeyVaultKeyContainerName
          query:
            selector: '.type == "azure-native:keyvault:Vault" and (.urn | (type == "string" and endswith("azure-native:keyvault:Vault::keyVault")))'
            path: .outputs.name
        - name: ClusterIssuerName
          query:
            selector: '.type == "kubernetes:cert-manager.io/v1:ClusterIssuer"'
            path: .outputs.metadata.name
        - name: DbHost
          query:
            selector: '.type == "azure:mysql/flexibleServer:FlexibleServer"'
            path: .outputs.fqdn
        - name: RedisHost
          query:
            selector: '.type == "azure:redis/cache:Cache"'
            path: .outputs.hostname
        - name: RedisPasswordSecretName
          query:
            selector: '.type == "azure-native:keyvault:Secret" and (.urn | (type == "string" and endswith("azure-native:keyvault:Secret::redisPrimaryKeySecret")))'
            path: .outputs.name
